$(document).ready(function(){module("Objects"),test("keys",function(){equal(_.keys({one:1,two:2}).join(", "),"one, two","can extract the keys from an object");var e=[];e[1]=0,equal(_.keys(e).join(", "),"1","is not fooled by sparse arrays; see issue #95"),raises(function(){_.keys(null)},TypeError,"throws an error for `null` values"),raises(function(){_.keys(void 0)},TypeError,"throws an error for `undefined` values"),raises(function(){_.keys(1)},TypeError,"throws an error for number primitives"),raises(function(){_.keys("a")},TypeError,"throws an error for string primitives"),raises(function(){_.keys(!0)},TypeError,"throws an error for boolean primitives")}),test("values",function(){equal(_.values({one:1,two:2}).join(", "),"1, 2","can extract the values from an object"),equal(_.values({one:1,two:2,length:3}).join(", "),"1, 2, 3",'... even when one of them is "length"')}),test("pairs",function(){deepEqual(_.pairs({one:1,two:2}),[["one",1],["two",2]],"can convert an object into pairs"),deepEqual(_.pairs({one:1,two:2,length:3}),[["one",1],["two",2],["length",3]],'... even when one of them is "length"')}),test("invert",function(){var e={first:"Moe",second:"Larry",third:"Curly"};equal(_.keys(_.invert(e)).join(" "),"Moe Larry Curly","can invert an object"),ok(_.isEqual(_.invert(_.invert(e)),e),"two inverts gets you back where you started");var e={length:3};ok(_.invert(e)["3"]=="length",'can invert an object with "length"')}),test("functions",function(){var e={a:"dash",b:_.map,c:/yo/,d:_.reduce};ok(_.isEqual(["b","d"],_.functions(e)),"can grab the function names of any passed-in object");var t=function(){};t.prototype.run=function(){},equal(_.functions(new t).join(""),"run","also looks up functions on the prototype")}),test("extend",function(){var e;equal(_.extend({},{a:"b"}).a,"b","can extend an object with the attributes of another"),equal(_.extend({a:"x"},{a:"b"}).a,"b","properties in source override destination"),equal(_.extend({x:"x"},{a:"b"}).x,"x","properties not in source don't get overriden"),e=_.extend({x:"x"},{a:"a"},{b:"b"}),ok(_.isEqual(e,{x:"x",a:"a",b:"b"}),"can extend from multiple source objects"),e=_.extend({x:"x"},{a:"a",x:2},{a:"b"}),ok(_.isEqual(e,{x:2,a:"b"}),"extending from multiple source objects last property trumps"),e=_.extend({},{a:void 0,b:null}),equal(_.keys(e).join(""),"ab","extend copies undefined values");try{e={},_.extend(e,null,undefined,{a:1})}catch(t){}equal(e.a,1,"should not error on `null` or `undefined` sources")}),test("pick",function(){var e;e=_.pick({a:1,b:2,c:3},"a","c"),ok(_.isEqual(e,{a:1,c:3}),"can restrict properties to those named"),e=_.pick({a:1,b:2,c:3},["b","c"]),ok(_.isEqual(e,{b:2,c:3}),"can restrict properties to those named in an array"),e=_.pick({a:1,b:2,c:3},["a"],"b"),ok(_.isEqual(e,{a:1,b:2}),"can restrict properties to those named in mixed args");var t=function(){};t.prototype={a:1,b:2,c:3},ok(_.isEqual(_.pick(new t,"a","c"),{a:1,c:3}),"include prototype props")}),test("omit",function(){var e;e=_.omit({a:1,b:2,c:3},"b"),ok(_.isEqual(e,{a:1,c:3}),"can omit a single named property"),e=_.omit({a:1,b:2,c:3},"a","c"),ok(_.isEqual(e,{b:2}),"can omit several named properties"),e=_.omit({a:1,b:2,c:3},["b","c"]),ok(_.isEqual(e,{a:1}),"can omit properties named in an array");var t=function(){};t.prototype={a:1,b:2,c:3},ok(_.isEqual(_.omit(new t,"b"),{a:1,c:3}),"include prototype props")}),test("defaults",function(){var e,t={zero:0,one:1,empty:"",nan:NaN,nothing:null};_.defaults(t,{zero:1,one:10,twenty:20,nothing:"str"}),equal(t.zero,0,"value exists"),equal(t.one,1,"value exists"),equal(t.twenty,20,"default applied"),equal(t.nothing,null,"null isn't overridden"),_.defaults(t,{empty:"full"},{nan:"nan"},{word:"word"},{word:"dog"}),equal(t.empty,"","value exists"),ok(_.isNaN(t.nan),"NaN isn't overridden"),equal(t.word,"word","new value is added, first one wins");try{t={},_.defaults(t,null,undefined,{a:1})}catch(n){}equal(t.a,1,"should not error on `null` or `undefined` sources")}),test("clone",function(){var e={name:"moe",lucky:[13,27,34]},t=_.clone(e);equal(t.name,"moe","the clone as the attributes of the original"),t.name="curly",ok(t.name=="curly"&&e.name=="moe","clones can change shallow attributes without affecting the original"),t.lucky.push(101),equal(_.last(e.lucky),101,"changes to deep attributes are shared with the original"),equal(_.clone(undefined),void 0,"non objects should not be changed by clone"),equal(_.clone(1),1,"non objects should not be changed by clone"),equal(_.clone(null),null,"non objects should not be changed by clone")}),test("isEqual",function(){function e(){this.value=1}function t(){this.value=1}e.prototype.value=1,t.prototype.value=2,ok(_.isEqual(null,null),"`null` is equal to `null`"),ok(_.isEqual(),"`undefined` is equal to `undefined`"),ok(!_.isEqual(0,0),"`0` is not equal to `-0`"),ok(!_.isEqual(0,0),"Commutative equality is implemented for `0` and `-0`"),ok(!_.isEqual(null,undefined),"`null` is not equal to `undefined`"),ok(!_.isEqual(undefined,null),"Commutative equality is implemented for `null` and `undefined`"),ok(_.isEqual("Curly","Curly"),"Identical string primitives are equal"),ok(_.isEqual(new String("Curly"),new String("Curly")),"String objects with identical primitive values are equal"),ok(_.isEqual(new String("Curly"),"Curly"),"String primitives and their corresponding object wrappers are equal"),ok(_.isEqual("Curly",new String("Curly")),"Commutative equality is implemented for string objects and primitives"),ok(!_.isEqual("Curly","Larry"),"String primitives with different values are not equal"),ok(!_.isEqual(new String("Curly"),new String("Larry")),"String objects with different primitive values are not equal"),ok(!_.isEqual(new String("Curly"),{toString:function(){return"Curly"}}),"String objects and objects with a custom `toString` method are not equal"),ok(_.isEqual(75,75),"Identical number primitives are equal"),ok(_.isEqual(new Number(75),new Number(75)),"Number objects with identical primitive values are equal"),ok(_.isEqual(75,new Number(75)),"Number primitives and their corresponding object wrappers are equal"),ok(_.isEqual(new Number(75),75),"Commutative equality is implemented for number objects and primitives"),ok(!_.isEqual(new Number(0),0),"`new Number(0)` and `-0` are not equal"),ok(!_.isEqual(0,new Number(0)),"Commutative equality is implemented for `new Number(0)` and `-0`"),ok(!_.isEqual(new Number(75),new Number(63)),"Number objects with different primitive values are not equal"),ok(!_.isEqual(new Number(63),{valueOf:function(){return 63}}),"Number objects and objects with a `valueOf` method are not equal"),ok(_.isEqual(NaN,NaN),"`NaN` is equal to `NaN`"),ok(!_.isEqual(61,NaN),"A number primitive is not equal to `NaN`"),ok(!_.isEqual(new Number(79),NaN),"A number object is not equal to `NaN`"),ok(!_.isEqual(Infinity,NaN),"`Infinity` is not equal to `NaN`"),ok(_.isEqual(!0,!0),"Identical boolean primitives are equal"),ok(_.isEqual(new Boolean,new Boolean),"Boolean objects with identical primitive values are equal"),ok(_.isEqual(!0,new Boolean(!0)),"Boolean primitives and their corresponding object wrappers are equal"),ok(_.isEqual(new Boolean(!0),!0),"Commutative equality is implemented for booleans"),ok(!_.isEqual(new Boolean(!0),new Boolean),"Boolean objects with different primitive values are not equal"),ok(!_.isEqual(!0,new Boolean(!1)),"Boolean objects are not equal to the boolean primitive `true`"),ok(!_.isEqual("75",75),"String and number primitives with like values are not equal"),ok(!_.isEqual(new Number(63),new String(63)),"String and number objects with like values are not equal"),ok(!_.isEqual(75,"75"),"Commutative equality is implemented for like string and number values"),ok(!_.isEqual(0,""),"Number and string primitives with like values are not equal"),ok(!_.isEqual(1,!0),"Number and boolean primitives with like values are not equal"),ok(!_.isEqual(new Boolean(!1),new Number(0)),"Boolean and number objects with like values are not equal"),ok(!_.isEqual(!1,new String("")),"Boolean primitives and string objects with like values are not equal"),ok(!_.isEqual(12564504e5,new Date(2009,9,25)),"Dates and their corresponding numeric primitive values are not equal"),ok(_.isEqual(new Date(2009,9,25),new Date(2009,9,25)),"Date objects referencing identical times are equal"),ok(!_.isEqual(new Date(2009,9,25),new Date(2009,11,13)),"Date objects referencing different times are not equal"),ok(!_.isEqual(new Date(2009,11,13),{getTime:function(){return 12606876e5}}),"Date objects and objects with a `getTime` method are not equal"),ok(!_.isEqual(new Date("Curly"),new Date("Curly")),"Invalid dates are not equal"),ok(!_.isEqual(e,t),"Different functions with identical bodies and source code representations are not equal"),ok(_.isEqual(/(?:)/gim,/(?:)/gim),"RegExps with equivalent patterns and flags are equal"),ok(!_.isEqual(/(?:)/g,/(?:)/gi),"RegExps with equivalent patterns and different flags are not equal"),ok(!_.isEqual(/Moe/gim,/Curly/gim),"RegExps with different patterns and equivalent flags are not equal"),ok(!_.isEqual(/(?:)/gi,/(?:)/g),"Commutative equality is implemented for RegExps"),ok(!_.isEqual(/Curly/g,{source:"Larry",global:!0,ignoreCase:!1,multiline:!1}),"RegExps and RegExp-like objects are not equal"),ok(_.isEqual({},{}),"Empty object literals are equal"),ok(_.isEqual([],[]),"Empty array literals are equal"),ok(_.isEqual([{}],[{}]),"Empty nested arrays and objects are equal"),ok(!_.isEqual({length:0},[]),"Array-like objects and arrays are not equal."),ok(!_.isEqual([],{length:0}),"Commutative equality is implemented for array-like objects"),ok(!_.isEqual({},[]),"Object literals and array literals are not equal"),ok(!_.isEqual([],{}),"Commutative equality is implemented for objects and arrays"),ok(_.isEqual([1,"Larry",!0],[1,"Larry",!0]),"Arrays containing identical primitives are equal"),ok(_.isEqual([/Moe/g,new Date(2009,9,25)],[/Moe/g,new Date(2009,9,25)]),"Arrays containing equivalent elements are equal");var n=[new Number(47),!1,"Larry",/Moe/,new Date(2009,11,13),["running","biking",new String("programming")],{a:47}],r=[new Number(47),!1,"Larry",/Moe/,new Date(2009,11,13),["running","biking",new String("programming")],{a:47}];ok(_.isEqual(n,r),"Arrays containing nested arrays and objects are recursively compared"),n.forEach=n.map=n.filter=n.every=n.indexOf=n.lastIndexOf=n.some=n.reduce=n.reduceRight=null,r.join=r.pop=r.reverse=r.shift=r.slice=r.splice=r.concat=r.sort=r.unshift=null,ok(_.isEqual(n,r),"Arrays containing equivalent elements and different non-numeric properties are equal"),n.push("White Rocks"),ok(!_.isEqual(n,r),"Arrays of different lengths are not equal"),n.push("East Boulder"),r.push("Gunbarrel Ranch","Teller Farm"),ok(!_.isEqual(n,r),"Arrays of identical lengths containing different elements are not equal"),ok(_.isEqual(Array(3),Array(3)),"Sparse arrays of identical lengths are equal"),ok(!_.isEqual(Array(3),Array(6)),"Sparse arrays of different lengths are not equal when both are empty"),ok(_.isEqual({a:"Curly",b:1,c:!0},{a:"Curly",b:1,c:!0}),"Objects containing identical primitives are equal"),ok(_.isEqual({a:/Curly/g,b:new Date(2009,11,13)},{a:/Curly/g,b:new Date(2009,11,13)}),"Objects containing equivalent members are equal"),ok(!_.isEqual({a:63,b:75},{a:61,b:55}),"Objects of identical sizes with different values are not equal"),ok(!_.isEqual({a:63,b:75},{a:61,c:55}),"Objects of identical sizes with different property names are not equal"),ok(!_.isEqual({a:1,b:2},{a:1}),"Objects of different sizes are not equal"),ok(!_.isEqual({a:1},{a:1,b:2}),"Commutative equality is implemented for objects"),ok(!_.isEqual({x:1,y:undefined},{x:1,z:2}),"Objects with identical keys and different values are not equivalent"),n={name:new String("Moe Howard"),age:new Number(77),stooge:!0,hobbies:["acting"],film:{name:"Sing a Song of Six Pants",release:new Date(1947,9,30),stars:[new String("Larry Fine"),"Shemp Howard"],minutes:new Number(16),seconds:54}},r={name:new String("Moe Howard"),age:new Number(77),stooge:!0,hobbies:["acting"],film:{name:"Sing a Song of Six Pants",release:new Date(1947,9,30),stars:[new String("Larry Fine"),"Shemp Howard"],minutes:new Number(16),seconds:54}},ok(_.isEqual(n,r),"Objects with nested equivalent members are recursively compared"),ok(_.isEqual(new e,new e),"Object instances are equal"),ok(!_.isEqual(new e,new t),"Objects with different constructors and identical own properties are not equal"),ok(!_.isEqual({value:1},new e),"Object instances and objects sharing equivalent properties are not equal"),ok(!_.isEqual({value:2},new t),"The prototype chain of objects should not be examined"),(n=[]).push(n),(r=[]).push(r),ok(_.isEqual(n,r),"Arrays containing circular references are equal"),n.push(new String("Larry")),r.push(new String("Larry")),ok(_.isEqual(n,r),"Arrays containing circular references and equivalent properties are equal"),n.push("Shemp"),r.push("Curly"),ok(!_.isEqual(n,r),"Arrays containing circular references and different properties are not equal"),n=["everything is checked but","this","is not"],n[1]=n,r=["everything is checked but",["this","array"],"is not"],ok(!_.isEqual(n,r),"Comparison of circular references with non-circular references are not equal"),n={abc:null},r={abc:null},n.abc=n,r.abc=r,ok(_.isEqual(n,r),"Objects containing circular references are equal"),n.def=75,r.def=75,ok(_.isEqual(n,r),"Objects containing circular references and equivalent properties are equal"),n.def=new Number(75),r.def=new Number(63),ok(!_.isEqual(n,r),"Objects containing circular references and different properties are not equal"),n={everything:"is checked",but:"this",is:"not"},n.but=n,r={everything:"is checked",but:{that:"object"},is:"not"},ok(!_.isEqual(n,r),"Comparison of circular references with non-circular object references are not equal"),n=[{abc:null}],r=[{abc:null}],(n[0].abc=n).push(n),(r[0].abc=r).push(r),ok(_.isEqual(n,r),"Cyclic structures are equal"),n[0].def="Larry",r[0].def="Larry",ok(_.isEqual(n,r),"Cyclic structures containing equivalent properties are equal"),n[0].def=new String("Larry"),r[0].def=new String("Curly"),ok(!_.isEqual(n,r),"Cyclic structures containing different properties are not equal"),n={foo:{b:{foo:{c:{foo:null}}}}},r={foo:{b:{foo:{c:{foo:null}}}}},n.foo.b.foo.c.foo=n,r.foo.b.foo.c.foo=r,ok(_.isEqual(n,r),"Cyclic structures with nested and identically-named properties are equal"),ok(!_.isEqual(_({x:1,y:undefined}).chain(),_({x:1,z:2}).chain()),"Chained objects containing different values are not equal"),n=_({x:1,y:2}).chain(),r=_({x:1,y:2}).chain(),equal(_.isEqual(n.isEqual(r),_(!0)),!0,"`isEqual` can be chained"),ok(_.isEqual({},iObject))}),test("isEmpty",function(){ok(!_([1]).isEmpty(),"[1] is not empty"),ok(_.isEmpty([]),"[] is empty"),ok(!_.isEmpty({one:1}),"{one : 1} is not empty"),ok(_.isEmpty({}),"{} is empty"),ok(_.isEmpty(new RegExp("")),"objects with prototype properties are empty"),ok(_.isEmpty(null),"null is empty"),ok(_.isEmpty(),"undefined is empty"),ok(_.isEmpty(""),"the empty string is empty"),ok(!_.isEmpty("moe"),"but other strings are not");var e={one:1};delete e.one,ok(_.isEmpty(e),"deleting all the keys from an object empties it")});var e=document.createElement("iframe");jQuery(e).appendTo(document.body);var t=e.contentDocument||e.contentWindow.document;t.write("<script>      parent.iElement   = document.createElement('div');      parent.iArguments = (function(){ return arguments; })(1, 2, 3);      parent.iArray     = [1, 2, 3];      parent.iString    = new String('hello');      parent.iNumber    = new Number(100);      parent.iFunction  = (function(){});      parent.iDate      = new Date();      parent.iRegExp    = /hi/;      parent.iNaN       = NaN;      parent.iNull      = null;      parent.iBoolean   = new Boolean(false);      parent.iUndefined = undefined;      parent.iObject     = {};    </script>"),t.close(),test("isElement",function(){ok(!_.isElement("div"),"strings are not dom elements"),ok(_.isElement($("html")[0]),"the html tag is a DOM element"),ok(_.isElement(iElement),"even from another frame")}),test("isArguments",function(){var e=function(){return arguments}(1,2,3);ok(!_.isArguments("string"),"a string is not an arguments object"),ok(!_.isArguments(_.isArguments),"a function is not an arguments object"),ok(_.isArguments(e),"but the arguments object is an arguments object"),ok(!_.isArguments(_.toArray(e)),"but not when it's converted into an array"),ok(!_.isArguments([1,2,3]),"and not vanilla arrays."),ok(_.isArguments(iArguments),"even from another frame")}),test("isObject",function(){ok(_.isObject(arguments),"the arguments object is object"),ok(_.isObject([1,2,3]),"and arrays"),ok(_.isObject($("html")[0]),"and DOM element"),ok(_.isObject(iElement),"even from another frame"),ok(_.isObject(function(){}),"and functions"),ok(_.isObject(iFunction),"even from another frame"),ok(!_.isObject(null),"but not null"),ok(!_.isObject(undefined),"and not undefined"),ok(!_.isObject("string"),"and not string"),ok(!_.isObject(12),"and not number"),ok(!_.isObject(!0),"and not boolean"),ok(_.isObject(new String("string")),"but new String()")}),test("isArray",function(){ok(!_.isArray(undefined),"undefined vars are not arrays"),ok(!_.isArray(arguments),"the arguments object is not an array"),ok(_.isArray([1,2,3]),"but arrays are"),ok(_.isArray(iArray),"even from another frame")}),test("isString",function(){var e=new String("I am a string object");ok(!_.isString(document.body),"the document body is not a string"),ok(_.isString([1,2,3].join(", ")),"but strings are"),ok(_.isString(iString),"even from another frame"),ok(_.isString("I am a string literal"),"string literals are"),ok(_.isString(e),"so are String objects")}),test("isNumber",function(){ok(!_.isNumber("string"),"a string is not a number"),ok(!_.isNumber(arguments),"the arguments object is not a number"),ok(!_.isNumber(undefined),"undefined is not a number"),ok(_.isNumber(11.3),"but numbers are"),ok(_.isNumber(NaN),"NaN *is* a number"),ok(_.isNumber(Infinity),"Infinity is a number"),ok(_.isNumber(iNumber),"even from another frame"),ok(!_.isNumber("1"),"numeric strings are not numbers")}),test("isBoolean",function(){ok(!_.isBoolean(2),"a number is not a boolean"),ok(!_.isBoolean("string"),"a string is not a boolean"),ok(!_.isBoolean("false"),'the string "false" is not a boolean'),ok(!_.isBoolean("true"),'the string "true" is not a boolean'),ok(!_.isBoolean(arguments),"the arguments object is not a boolean"),ok(!_.isBoolean(undefined),"undefined is not a boolean"),ok(!_.isBoolean(NaN),"NaN is not a boolean"),ok(!_.isBoolean(null),"null is not a boolean"),ok(_.isBoolean(!0),"but true is"),ok(_.isBoolean(!1),"and so is false"),ok(_.isBoolean(iBoolean),"even from another frame")}),test("isFunction",function(){ok(!_.isFunction(undefined),"undefined vars are not functions"),ok(!_.isFunction([1,2,3]),"arrays are not functions"),ok(!_.isFunction("moe"),"strings are not functions"),ok(_.isFunction(_.isFunction),"but functions are"),ok(_.isFunction(iFunction),"even from another frame"),ok(_.isFunction(function(){}),"even anonymous ones")}),test("isDate",function(){ok(!_.isDate(100),"numbers are not dates"),ok(!_.isDate({}),"objects are not dates"),ok(_.isDate(new Date),"but dates are"),ok(_.isDate(iDate),"even from another frame")}),test("isRegExp",function(){ok(!_.isRegExp(_.identity),"functions are not RegExps"),ok(_.isRegExp(/identity/),"but RegExps are"),ok(_.isRegExp(iRegExp),"even from another frame")}),test("isFinite",function(){ok(!_.isFinite(undefined),"undefined is not Finite"),ok(!_.isFinite(null),"null is not Finite"),ok(!_.isFinite(NaN),"NaN is not Finite"),ok(!_.isFinite(Infinity),"Infinity is not Finite"),ok(!_.isFinite(-Infinity),"-Infinity is not Finite"),ok(_.isFinite("12"),"Numeric strings are numbers"),ok(!_.isFinite("1a"),"Non numeric strings are not numbers"),ok(!_.isFinite(""),"Empty strings are not numbers");var e=new Number(5);ok(_.isFinite(e),"Number instances can be finite"),ok(_.isFinite(0),"0 is Finite"),ok(_.isFinite(123),"Ints are Finite"),ok(_.isFinite(-12.44),"Floats are Finite")}),test("isNaN",function(){ok(!_.isNaN(undefined),"undefined is not NaN"),ok(!_.isNaN(null),"null is not NaN"),ok(!_.isNaN(0),"0 is not NaN"),ok(_.isNaN(NaN),"but NaN is"),ok(_.isNaN(iNaN),"even from another frame"),ok(_.isNaN(new Number(NaN)),"wrapped NaN is still NaN")}),test("isNull",function(){ok(!_.isNull(undefined),"undefined is not null"),ok(!_.isNull(NaN),"NaN is not null"),ok(_.isNull(null),"but null is"),ok(_.isNull(iNull),"even from another frame")}),test("isUndefined",function(){ok(!_.isUndefined(1),"numbers are defined"),ok(!_.isUndefined(null),"null is defined"),ok(!_.isUndefined(!1),"false is defined"),ok(!_.isUndefined(NaN),"NaN is defined"),ok(_.isUndefined(),"nothing is undefined"),ok(_.isUndefined(undefined),"undefined is undefined"),ok(_.isUndefined(iUndefined),"even from another frame")}),window.ActiveXObject&&test("IE host objects",function(){var e=new ActiveXObject("Msxml2.DOMDocument.3.0");ok(!_.isNumber(e)),ok(!_.isBoolean(e)),ok(!_.isNaN(e)),ok(!_.isFunction(e)),ok(!_.isNull(e)),ok(!_.isUndefined(e))}),test("tap",function(){var e=null,t=function(t){e=t},n=_.tap(1,t);equal(e,1,"passes tapped object to interceptor"),equal(n,1,"returns tapped object"),n=_([1,2,3]).chain().map(function(e){return e*2}).max().tap(t).value(),ok(n==6&&e==6,"can use tapped objects in a chain")}),test("has",function(){var e={foo:"bar",func:function(){}};ok(_.has(e,"foo"),"has() checks that the object has a property."),ok(_.has(e,"baz")==0,"has() returns false if the object doesn't have the property."),ok(_.has(e,"func"),"has() works for functions too."),e.hasOwnProperty=null,ok(_.has(e,"foo"),"has() works even when the hasOwnProperty method is deleted.");var t={};t.prototype=e,ok(_.has(t,"foo")==0,"has() does not check the prototype chain for a property.")})});