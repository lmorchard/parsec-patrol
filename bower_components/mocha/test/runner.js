var mocha=require("../"),Suite=mocha.Suite,Runner=mocha.Runner,Test=mocha.Test;describe("Runner",function(){var e,t;beforeEach(function(){e=new Suite(null,"root"),t=new Runner(e)}),describe(".grep()",function(){it("should update the runner.total with number of matched tests",function(){e.addTest(new Test("im a test about lions")),e.addTest(new Test("im another test about lions")),e.addTest(new Test("im a test about bears"));var t=new Runner(e);t.grep(/lions/),t.total.should.equal(2)}),it("should update the runner.total with number of matched tests when inverted",function(){e.addTest(new Test("im a test about lions")),e.addTest(new Test("im another test about lions")),e.addTest(new Test("im a test about bears"));var t=new Runner(e);t.grep(/lions/,!0),t.total.should.equal(1)})}),describe(".grepTotal()",function(){it("should return the total number of matched tests",function(){e.addTest(new Test("im a test about lions")),e.addTest(new Test("im another test about lions")),e.addTest(new Test("im a test about bears")),t.grep(/lions/),t.grepTotal(e).should.equal(2)}),it("should return the total number of matched tests when inverted",function(){e.addTest(new Test("im a test about lions")),e.addTest(new Test("im another test about lions")),e.addTest(new Test("im a test about bears")),t.grep(/lions/,!0),t.grepTotal(e).should.equal(1)})}),describe(".globalProps()",function(){it("should include common non enumerable globals",function(){var e=t.globalProps();e.should.include("setTimeout"),e.should.include("clearTimeout"),e.should.include("setInterval"),e.should.include("clearInterval"),e.should.include("Date"),e.should.include("XMLHttpRequest")})}),describe(".globals()",function(){it("should default to the known globals",function(){t.globals().length.should.be.above(16)}),it("should white-list globals",function(){t.globals(["foo","bar"]),t.globals().should.include("foo"),t.globals().should.include("bar")})}),describe(".checkGlobals(test)",function(){it("should allow variables that match a wildcard",function(e){t.globals(["foo*","giz*"]),global.foo="baz",global.gizmo="quux",t.checkGlobals(),delete global.foo,delete global.gizmo,e()}),it('should emit "fail" when a new global is introduced',function(e){t.checkGlobals(),global.foo="bar",t.on("fail",function(t,n){t.should.equal("im a test"),n.message.should.equal("global leak detected: foo"),delete global.foo,e()}),t.checkGlobals("im a test")}),it("should not fail when a new common global is introduced",function(){delete global.XMLHttpRequest,global.propertyIsEnumerable("XMLHttpRequest").should.not.be.ok;var t=new Test("im a test about bears");e.addTest(t);var n=new Runner(e);global.XMLHttpRequest=function(){},global.propertyIsEnumerable("XMLHttpRequest").should.be.ok,n.checkGlobals(t),t.should.not.have.key("state"),delete global.XMLHttpRequest}),it("should pluralize the error message when several are introduced",function(e){t.checkGlobals(),global.foo="bar",global.bar="baz",t.on("fail",function(t,n){t.should.equal("im a test"),n.message.should.equal("global leaks detected: foo, bar"),delete global.foo,delete global.bar,e()}),t.checkGlobals("im a test")})}),describe(".fail(test, err)",function(){it("should increment .failures",function(){t.failures.should.equal(0),t.fail({},{}),t.failures.should.equal(1),t.fail({},{}),t.failures.should.equal(2)}),it('should set test.state to "failed"',function(){var e={};t.fail(e,"some error"),e.state.should.equal("failed")}),it('should emit "fail"',function(e){var n={},r={};t.on("fail",function(t,n){t.should.equal(t),n.should.equal(n),e()}),t.fail(n,r)})}),describe(".failHook(hoot, err)",function(){it("should increment .failures",function(){t.failures.should.equal(0),t.failHook({},{}),t.failures.should.equal(1),t.failHook({},{}),t.failures.should.equal(2)}),it('should emit "fail"',function(e){var n={},r={};t.on("fail",function(t,n){t.should.equal(t),n.should.equal(n),e()}),t.failHook(n,r)}),it('should emit "end"',function(e){var n={},r={};t.on("end",e),t.failHook(n,r)})})});