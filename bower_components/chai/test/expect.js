suite("expect",function(){var e=chai.expect;test("chai.version",function(){e(chai).to.have.property("version")}),test("assertion",function(){e("test").to.be.a("string"),e("foo").to.equal("foo")}),test("true",function(){e(!0).to.be.true,e(!1).to.not.be.true,e(1).to.not.be.true,err(function(){e("test").to.be.true},"expected 'test' to be true")}),test("ok",function(){e(!0).to.be.ok,e(!1).to.not.be.ok,e(1).to.be.ok,e(0).to.not.be.ok,err(function(){e("").to.be.ok},"expected '' to be truthy"),err(function(){e("test").to.not.be.ok},"expected 'test' to be falsy")}),test("false",function(){e(!1).to.be.false,e(!0).to.not.be.false,e(0).to.not.be.false,err(function(){e("").to.be.false},"expected '' to be false")}),test("null",function(){e(null).to.be.null,e(!1).to.not.be.null,err(function(){e("").to.be.null},"expected '' to be null")}),test("undefined",function(){e(undefined).to.be.undefined,e(null).to.not.be.undefined,err(function(){e("").to.be.undefined},"expected '' to be undefined")}),test("exist",function(){var t="bar",n;e(t).to.exist,e(n).to.not.exist}),test("arguments",function(){var t=function(){return arguments}(1,2,3);e(t).to.be.arguments,e([]).to.not.be.arguments,e(t).to.be.an("arguments").and.be.arguments,e([]).to.be.an("array").and.not.be.Arguments}),test(".equal()",function(){var t;e(undefined).to.equal(t)}),test("typeof",function(){e("test").to.be.a("string"),err(function(){e("test").to.not.be.a("string")},"expected 'test' not to be a string"),function(){e(arguments).to.be.an("arguments")}(1,2),e(5).to.be.a("number"),e(new Number(1)).to.be.a("number"),e(Number(1)).to.be.a("number"),e(!0).to.be.a("boolean"),e(new Array).to.be.a("array"),e(new Object).to.be.a("object"),e({}).to.be.a("object"),e([]).to.be.a("array"),e(function(){}).to.be.a("function"),e(null).to.be.a("null"),err(function(){e(5).to.not.be.a("number","blah")},"blah: expected 5 not to be a number")}),test("instanceof",function(){function t(){}e(new t).to.be.an.instanceof(t),err(function(){e(3).to.an.instanceof(t,"blah")},"blah: expected 3 to be an instance of Foo")}),test("within(start, finish)",function(){e(5).to.be.within(5,10),e(5).to.be.within(3,6),e(5).to.be.within(3,5),e(5).to.not.be.within(1,3),e("foo").to.have.length.within(2,4),e([1,2,3]).to.have.length.within(2,4),err(function(){e(5).to.not.be.within(4,6,"blah")},"blah: expected 5 to not be within 4..6","blah"),err(function(){e(10).to.be.within(50,100,"blah")},"blah: expected 10 to be within 50..100"),err(function(){e("foo").to.have.length.within(5,7,"blah")},"blah: expected 'foo' to have a length within 5..7"),err(function(){e([1,2,3]).to.have.length.within(5,7,"blah")},"blah: expected [ 1, 2, 3 ] to have a length within 5..7")}),test("above(n)",function(){e(5).to.be.above(2),e(5).to.be.greaterThan(2),e(5).to.not.be.above(5),e(5).to.not.be.above(6),e("foo").to.have.length.above(2),e([1,2,3]).to.have.length.above(2),err(function(){e(5).to.be.above(6,"blah")},"blah: expected 5 to be above 6","blah"),err(function(){e(10).to.not.be.above(6,"blah")},"blah: expected 10 to be at most 6"),err(function(){e("foo").to.have.length.above(4,"blah")},"blah: expected 'foo' to have a length above 4 but got 3"),err(function(){e([1,2,3]).to.have.length.above(4,"blah")},"blah: expected [ 1, 2, 3 ] to have a length above 4 but got 3")}),test("least(n)",function(){e(5).to.be.at.least(2),e(5).to.be.at.least(5),e(5).to.not.be.at.least(6),e("foo").to.have.length.of.at.least(2),e([1,2,3]).to.have.length.of.at.least(2),err(function(){e(5).to.be.at.least(6,"blah")},"blah: expected 5 to be at least 6","blah"),err(function(){e(10).to.not.be.at.least(6,"blah")},"blah: expected 10 to be below 6"),err(function(){e("foo").to.have.length.of.at.least(4,"blah")},"blah: expected 'foo' to have a length at least 4 but got 3"),err(function(){e([1,2,3]).to.have.length.of.at.least(4,"blah")},"blah: expected [ 1, 2, 3 ] to have a length at least 4 but got 3"),err(function(){e([1,2,3,4]).to.not.have.length.of.at.least(4,"blah")},"blah: expected [ 1, 2, 3, 4 ] to have a length below 4")}),test("below(n)",function(){e(2).to.be.below(5),e(2).to.be.lessThan(5),e(2).to.not.be.below(2),e(2).to.not.be.below(1),e("foo").to.have.length.below(4),e([1,2,3]).to.have.length.below(4),err(function(){e(6).to.be.below(5,"blah")},"blah: expected 6 to be below 5"),err(function(){e(6).to.not.be.below(10,"blah")},"blah: expected 6 to be at least 10"),err(function(){e("foo").to.have.length.below(2,"blah")},"blah: expected 'foo' to have a length below 2 but got 3"),err(function(){e([1,2,3]).to.have.length.below(2,"blah")},"blah: expected [ 1, 2, 3 ] to have a length below 2 but got 3")}),test("most(n)",function(){e(2).to.be.at.most(5),e(2).to.be.at.most(2),e(2).to.not.be.at.most(1),e(2).to.not.be.at.most(1),e("foo").to.have.length.of.at.most(4),e([1,2,3]).to.have.length.of.at.most(4),err(function(){e(6).to.be.at.most(5,"blah")},"blah: expected 6 to be at most 5"),err(function(){e(6).to.not.be.at.most(10,"blah")},"blah: expected 6 to be above 10"),err(function(){e("foo").to.have.length.of.at.most(2,"blah")},"blah: expected 'foo' to have a length at most 2 but got 3"),err(function(){e([1,2,3]).to.have.length.of.at.most(2,"blah")},"blah: expected [ 1, 2, 3 ] to have a length at most 2 but got 3"),err(function(){e([1,2]).to.not.have.length.of.at.most(2,"blah")},"blah: expected [ 1, 2 ] to have a length above 2")}),test("match(regexp)",function(){e("foobar").to.match(/^foo/),e("foobar").to.not.match(/^bar/),err(function(){e("foobar").to.match(/^bar/i,"blah")},"blah: expected 'foobar' to match /^bar/i"),err(function(){e("foobar").to.not.match(/^foo/i,"blah")},"blah: expected 'foobar' not to match /^foo/i")}),test("length(n)",function(){e("test").to.have.length(4),e("test").to.not.have.length(3),e([1,2,3]).to.have.length(3),err(function(){e(4).to.have.length(3,"blah")},"blah: expected 4 to have a property 'length'"),err(function(){e("asd").to.not.have.length(3,"blah")},"blah: expected 'asd' to not have a length of 3")}),test("eql(val)",function(){e("test").to.eql("test"),e({foo:"bar"}).to.eql({foo:"bar"}),e(1).to.eql(1),e("4").to.not.eql(4),err(function(){e(4).to.eql(3,"blah")},"blah: expected 4 to deeply equal 3")}),"undefined"!=typeof Buffer&&test("Buffer eql()",function(){e(new Buffer([1])).to.eql(new Buffer([1])),err(function(){e(new Buffer([0])).to.eql(new Buffer([1]))},"expected <Buffer 00> to deeply equal <Buffer 01>")}),test("equal(val)",function(){e("test").to.equal("test"),e(1).to.equal(1),err(function(){e(4).to.equal(3,"blah")},"blah: expected 4 to equal 3"),err(function(){e("4").to.equal(4,"blah")},"blah: expected '4' to equal 4")}),test("deep.equal(val)",function(){e({foo:"bar"}).to.deep.equal({foo:"bar"}),e({foo:"bar"}).not.to.deep.equal({foo:"baz"})}),test("deep.equal(/regexp/)",function(){e(/a/).to.deep.equal(/a/),e(/a/).not.to.deep.equal(/b/),e(/a/g).to.deep.equal(/a/g),e(/a/g).not.to.deep.equal(/b/g),e(/a/i).to.deep.equal(/a/i),e(/a/i).not.to.deep.equal(/b/i),e(/a/m).to.deep.equal(/a/m),e(/a/m).not.to.deep.equal(/b/m)}),test("empty",function(){function t(){}t.prototype.length=0,e("").to.be.empty,e("foo").not.to.be.empty,e([]).to.be.empty,e(["foo"]).not.to.be.empty,e(new t).to.be.empty,e({arguments:0}).not.to.be.empty,e({}).to.be.empty,e({foo:"bar"}).not.to.be.empty,err(function(){e("").not.to.be.empty},"expected '' not to be empty"),err(function(){e("foo").to.be.empty},"expected 'foo' to be empty"),err(function(){e([]).not.to.be.empty},"expected [] not to be empty"),err(function(){e(["foo"]).to.be.empty},"expected [ 'foo' ] to be empty"),err(function(){e(new t).not.to.be.empty},"expected { length: 0 } not to be empty"),err(function(){e({arguments:0}).to.be.empty},"expected { arguments: 0 } to be empty"),err(function(){e({}).not.to.be.empty},"expected {} not to be empty"),err(function(){e({foo:"bar"}).to.be.empty},"expected { foo: 'bar' } to be empty")}),test("property(name)",function(){e("test").to.have.property("length"),e(4).to.not.have.property("length"),e({"foo.bar":"baz"}).to.have.property("foo.bar"),e({foo:{bar:"baz"}}).to.not.have.property("foo.bar"),err(function(){e("asd").to.have.property("foo")},"expected 'asd' to have a property 'foo'"),err(function(){e({foo:{bar:"baz"}}).to.have.property("foo.bar")},"expected { foo: { bar: 'baz' } } to have a property 'foo.bar'")}),test("deep.property(name)",function(){e({"foo.bar":"baz"}).to.not.have.deep.property("foo.bar"),e({foo:{bar:"baz"}}).to.have.deep.property("foo.bar"),err(function(){e({"foo.bar":"baz"}).to.have.deep.property("foo.bar")},"expected { 'foo.bar': 'baz' } to have a deep property 'foo.bar'")}),test("property(name, val)",function(){e("test").to.have.property("length",4),e("asd").to.have.property("constructor",String),err(function(){e("asd").to.have.property("length",4,"blah")},"blah: expected 'asd' to have a property 'length' of 4, but got 3"),err(function(){e("asd").to.not.have.property("length",3,"blah")},"blah: expected 'asd' to not have a property 'length' of 3"),err(function(){e("asd").to.not.have.property("foo",3,"blah")},"blah: 'asd' has no property 'foo'"),err(function(){e("asd").to.have.property("constructor",Number,"blah")},"blah: expected 'asd' to have a property 'constructor' of [Function: Number], but got [Function: String]")}),test("deep.property(name, val)",function(){e({foo:{bar:"baz"}}).to.have.deep.property("foo.bar","baz"),err(function(){e({foo:{bar:"baz"}}).to.have.deep.property("foo.bar","quux","blah")},"blah: expected { foo: { bar: 'baz' } } to have a deep property 'foo.bar' of 'quux', but got 'baz'"),err(function(){e({foo:{bar:"baz"}}).to.not.have.deep.property("foo.bar","baz","blah")},"blah: expected { foo: { bar: 'baz' } } to not have a deep property 'foo.bar' of 'baz'"),err(function(){e({foo:5}).to.not.have.deep.property("foo.bar","baz","blah")},"blah: { foo: 5 } has no deep property 'foo.bar'")}),test("ownProperty(name)",function(){e("test").to.have.ownProperty("length"),e("test").to.haveOwnProperty("length"),e({length:12}).to.have.ownProperty("length"),err(function(){e({length:12}).to.not.have.ownProperty("length","blah")},"blah: expected { length: 12 } to not have own property 'length'")}),test("string()",function(){e("foobar").to.have.string("bar"),e("foobar").to.have.string("foo"),e("foobar").to.not.have.string("baz"),err(function(){e(3).to.have.string("baz")},"expected 3 to be a string"),err(function(){e("foobar").to.have.string("baz","blah")},"blah: expected 'foobar' to contain 'baz'"),err(function(){e("foobar").to.not.have.string("bar","blah")},"blah: expected 'foobar' to not contain 'bar'")}),test("include()",function(){e(["foo","bar"]).to.include("foo"),e(["foo","bar"]).to.include("foo"),e(["foo","bar"]).to.include("bar"),e([1,2]).to.include(1),e(["foo","bar"]).to.not.include("baz"),e(["foo","bar"]).to.not.include(1),err(function(){e(["foo"]).to.include("bar","blah")},"blah: expected [ 'foo' ] to include 'bar'"),err(function(){e(["bar","foo"]).to.not.include("foo","blah")},"blah: expected [ 'bar', 'foo' ] to not include 'foo'")}),test("keys(array)",function(){e({foo:1}).to.have.keys(["foo"]),e({foo:1,bar:2}).to.have.keys(["foo","bar"]),e({foo:1,bar:2}).to.have.keys("foo","bar"),e({foo:1,bar:2,baz:3}).to.contain.keys("foo","bar"),e({foo:1,bar:2,baz:3}).to.contain.keys("bar","foo"),e({foo:1,bar:2,baz:3}).to.contain.keys("baz"),e({foo:1,bar:2}).to.contain.keys("foo"),e({foo:1,bar:2}).to.contain.keys("bar","foo"),e({foo:1,bar:2}).to.contain.keys(["foo"]),e({foo:1,bar:2}).to.contain.keys(["bar"]),e({foo:1,bar:2}).to.contain.keys(["bar","foo"]),e({foo:1,bar:2}).to.not.have.keys("baz"),e({foo:1,bar:2}).to.not.have.keys("foo","baz"),e({foo:1,bar:2}).to.not.contain.keys("baz"),e({foo:1,bar:2}).to.not.contain.keys("foo","baz"),e({foo:1,bar:2}).to.not.contain.keys("baz","foo"),err(function(){e({foo:1}).to.have.keys()},"keys required"),err(function(){e({foo:1}).to.have.keys([])},"keys required"),err(function(){e({foo:1}).to.not.have.keys([])},"keys required"),err(function(){e({foo:1}).to.contain.keys([])},"keys required"),err(function(){e({foo:1}).to.have.keys(["bar"])},"expected { foo: 1 } to have key 'bar'"),err(function(){e({foo:1}).to.have.keys(["bar","baz"])},"expected { foo: 1 } to have keys 'bar', and 'baz'"),err(function(){e({foo:1}).to.have.keys(["foo","bar","baz"])},"expected { foo: 1 } to have keys 'foo', 'bar', and 'baz'"),err(function(){e({foo:1}).to.not.have.keys(["foo"])},"expected { foo: 1 } to not have key 'foo'"),err(function(){e({foo:1}).to.not.have.keys(["foo"])},"expected { foo: 1 } to not have key 'foo'"),err(function(){e({foo:1,bar:2}).to.not.have.keys(["foo","bar"])},"expected { foo: 1, bar: 2 } to not have keys 'foo', and 'bar'"),err(function(){e({foo:1}).to.not.contain.keys(["foo"])},"expected { foo: 1 } to not contain key 'foo'"),err(function(){e({foo:1}).to.contain.keys("foo","bar")},"expected { foo: 1 } to contain keys 'foo', and 'bar'")}),test("chaining",function(){var t={name:"chai",extras:["milk","sugar","smile"]};e(t).to.have.property("extras").with.lengthOf(3),err(function(){e(t).to.have.property("extras").with.lengthOf(4)},"expected [ 'milk', 'sugar', 'smile' ] to have a length of 4 but got 3"),e(t).to.be.a("object").and.have.property("name","chai")}),test("throw",function(){var t=function(){this.name="PoorlyConstructedError"};t.prototype=Object.create(Error.prototype);var n=new RangeError("boo"),r=function(){!0},i=function(){throw new Error("testing")},s=function(){throw new ReferenceError("hello")},o=function(){throw new t},u=function(){throw n};e(r).to.not.throw(),e(r).to.not.throw(Error),e(r).to.not.throw(n),e(i).to.throw(),e(i).to.throw(Error),e(i).to.not.throw(ReferenceError),e(i).to.not.throw(n),e(s).to.throw(),e(s).to.throw(ReferenceError),e(s).to.throw(Error),e(s).to.not.throw(TypeError),e(s).to.not.throw(n),e(o).to.throw(),e(o).to.throw(t),e(o).to.throw(Error),e(o).to.not.throw(n),e(u).to.throw(n),e(i).to.throw(/testing/),e(i).to.not.throw(/hello/),e(i).to.throw("testing"),e(i).to.not.throw("hello"),e(i).to.throw(Error,/testing/),e(i).to.throw(Error,"testing"),err(function(){e(r).to.throw()},"expected [Function] to throw an error"),err(function(){e(r).to.throw(ReferenceError)},"expected [Function] to throw ReferenceError"),err(function(){e(r).to.throw(n)},"expected [Function] to throw [RangeError: boo]"),err(function(){e(i).to.not.throw()},"expected [Function] to not throw an error but [Error: testing] was thrown"),err(function(){e(i).to.throw(ReferenceError)},"expected [Function] to throw 'ReferenceError' but [Error: testing] was thrown"),err(function(){e(i).to.throw(n)},"expected [Function] to throw [RangeError: boo] but [Error: testing] was thrown"),err(function(){e(i).to.not.throw(Error)},"expected [Function] to not throw 'Error' but [Error: testing] was thrown"),err(function(){e(s).to.not.throw(ReferenceError)},"expected [Function] to not throw 'ReferenceError' but [ReferenceError: hello] was thrown"),err(function(){e(i).to.throw(t)},"expected [Function] to throw 'PoorlyConstructedError' but [Error: testing] was thrown"),err(function(){e(o).to.not.throw(t)},/^(expected \[Function\] to not throw 'PoorlyConstructedError' but)(.*)(PoorlyConstructedError|\{ Object \()(.*)(was thrown)$/),err(function(){e(o).to.throw(ReferenceError)},/^(expected \[Function\] to throw 'ReferenceError' but)(.*)(PoorlyConstructedError|\{ Object \()(.*)(was thrown)$/),err(function(){e(u).to.throw(new ReferenceError("eek"))},"expected [Function] to throw [ReferenceError: eek] but [RangeError: boo] was thrown"),err(function(){e(u).to.not.throw(n)},"expected [Function] to not throw [RangeError: boo]"),err(function(){e(i).to.not.throw(/testing/)},"expected [Function] to throw error not matching /testing/"),err(function(){e(i).to.throw(/hello/)},"expected [Function] to throw error matching /hello/ but got 'testing'"),err(function(){e(i).to.throw(Error,/hello/,"blah")},"blah: expected [Function] to throw error matching /hello/ but got 'testing'"),err(function(){e(i).to.throw(Error,"hello","blah")},"blah: expected [Function] to throw error including 'hello' but got 'testing'")}),test("respondTo",function(){function t(){}t.prototype.bar=function(){},t.func=function(){};var n={};n.foo=function(){},e(t).to.respondTo("bar"),e(t).to.not.respondTo("foo"),e(t).itself.to.respondTo("func"),e(t).itself.not.to.respondTo("bar"),e(n).to.respondTo("foo"),err(function(){e(t).to.respondTo("baz","constructor")},/^(constructor: expected)(.*)(\[Function: Foo\])(.*)(to respond to \'baz\')$/),err(function(){e(n).to.respondTo("baz","object")},/^(object: expected)(.*)(\{ foo: \[Function\] \}|\{ Object \()(.*)(to respond to \'baz\')$/)}),test("satisfy",function(){function t(e){return e===1}e(1).to.satisfy(t),err(function(){e(2).to.satisfy(t,"blah")},"blah: expected 2 to satisfy [Function: matcher]")}),test("closeTo",function(){e(1.5).to.be.closeTo(1,.5),e(10).to.be.closeTo(20,20),e(-10).to.be.closeTo(20,30),err(function(){e(2).to.be.closeTo(1,.5,"blah")},"blah: expected 2 to be close to 1 +/- 0.5"),err(function(){e(-10).to.be.closeTo(20,29,"blah")},"blah: expected -10 to be close to 20 +/- 29")}),test("include.members",function(){e([1,2,3]).to.include.members([]),e([1,2,3]).to.include.members([3,2]),e([1,2,3]).to.not.include.members([8,4]),e([1,2,3]).to.not.include.members([1,2,3,4])}),test("same.members",function(){e([5,4]).to.have.same.members([4,5]),e([5,4]).to.have.same.members([5,4]),e([5,4]).to.not.have.same.members([]),e([5,4]).to.not.have.same.members([6,3]),e([5,4]).to.not.have.same.members([5,4,2])}),test("members",function(){e([5,4]).members([4,5]),e([5,4]).members([5,4]),e([5,4]).not.members([]),e([5,4]).not.members([6,3]),e([5,4]).not.members([5,4,2])})});