suite("should",function(){var e=chai.Should();test("assertion",function(){"test".should.be.a("string"),e.equal("foo","foo"),e.not.equal("foo","bar")}),test("root exist",function(){var t="foo",n=undefined;e.exist(t),e.not.exist(n),err(function(){e.exist(n,"blah")},"blah: expected undefined to exist"),err(function(){e.not.exist(t,"blah")},"blah: expected 'foo' to not exist")}),test("root equal",function(){var t="value",n="value",r="foo";e.equal(t,n),e.not.equal(t,r),err(function(){e.equal(t,r,"blah")},"blah: expected 'value' to equal 'foo'"),err(function(){e.not.equal(t,n,"blah")},"blah: expected 'value' to not equal 'value'")}),test("root Throw",function(){e.Throw(function(){throw new Error("error!")},Error,"error!"),e.not.Throw(function(){}),err(function(){e.Throw(function(){throw new Error("error!")},Error,"needed user!","blah")},"blah: expected [Function] to throw error including 'needed user!' but got 'error!'"),err(function(){e.not.Throw(function(){throw new Error("error!")},Error,"error!","blah")},"blah: expected [Function] to not throw 'Error' but [Error: error!] was thrown")}),test("true",function(){(!0).should.be.true,(!1).should.not.be.true,1..should.not.be.true,!1,(!1).should.have.been.false,err(function(){"test".should.be.true},"expected 'test' to be true")}),test("ok",function(){(!0).should.be.ok,(!1).should.not.be.ok,1..should.be.ok,0..should.not.be.ok,err(function(){"".should.be.ok},"expected '' to be truthy"),err(function(){"test".should.not.be.ok},"expected 'test' to be falsy")}),test("false",function(){(!1).should.be.false,(!0).should.not.be.false,0..should.not.be.false,err(function(){"".should.be.false},"expected '' to be false")}),test("null",function(){0..should.not.be.null,err(function(){"".should.be.null},"expected '' to be null")}),test("undefined",function(){0..should.not.be.undefined,err(function(){"".should.be.undefined},"expected '' to be undefined")}),test("arguments",function(){var e=function(){return arguments}(1,2,3);e.should.be.arguments,[].should.not.be.arguments}),test(".equal()",function(){var t;e.equal(undefined,t)}),test("typeof",function(){"test".should.be.a("string"),err(function(){"test".should.not.be.a("string")},"expected 'test' not to be a string"),5..should.be.a("number"),(new Number(1)).should.be.a("number"),Number(1).should.be.a("number"),(!0).should.be.a("boolean"),(new Array).should.be.a("array"),(new Object).should.be.a("object"),{}.should.be.a("object"),[].should.be.a("array"),function(){}.should.be.a("function"),5..should.be.a("number"),err(function(){5..should.not.be.a("number")},"expected 5 not to be a number")}),test("instanceof",function(){function e(){}(new e).should.be.an.instanceof(e),err(function(){3..should.an.instanceof(e,"blah")},"blah: expected 3 to be an instance of Foo")}),test("within(start, finish)",function(){5..should.be.within(5,10),5..should.be.within(3,6),5..should.be.within(3,5),5..should.not.be.within(1,3),err(function(){5..should.not.be.within(4,6,"blah")},"blah: expected 5 to not be within 4..6"),err(function(){10..should.be.within(50,100,"blah")},"blah: expected 10 to be within 50..100"),err(function(){(({foo:1})).should.have.length.within(50,100,"blah")},"blah: expected { foo: 1 } to have a property 'length'")}),test("above(n)",function(){5..should.be.above(2),5..should.be.greaterThan(2),5..should.not.be.above(5),5..should.not.be.above(6),err(function(){5..should.be.above(6,"blah")},"blah: expected 5 to be above 6"),err(function(){10..should.not.be.above(6,"blah")},"blah: expected 10 to be at most 6"),err(function(){(({foo:1})).should.have.length.above(3,"blah")},"blah: expected { foo: 1 } to have a property 'length'")}),test("least(n)",function(){5..should.be.at.least(5),5..should.not.be.at.least(6),err(function(){5..should.be.at.least(6,"blah")},"blah: expected 5 to be at least 6"),err(function(){10..should.not.be.at.least(6,"blah")},"blah: expected 10 to be below 6"),err(function(){(({foo:1})).should.have.length.of.at.least(3,"blah")},"blah: expected { foo: 1 } to have a property 'length'")}),test("below(n)",function(){2..should.be.below(5),2..should.be.lessThan(5),2..should.not.be.below(2),2..should.not.be.below(1),err(function(){6..should.be.below(5,"blah")},"blah: expected 6 to be below 5"),err(function(){6..should.not.be.below(10,"blah")},"blah: expected 6 to be at least 10"),err(function(){(({foo:1})).should.have.length.below(3,"blah")},"blah: expected { foo: 1 } to have a property 'length'")}),test("most(n)",function(){2..should.be.at.most(2),2..should.not.be.at.most(1),err(function(){6..should.be.at.most(5,"blah")},"blah: expected 6 to be at most 5"),err(function(){6..should.not.be.at.most(10,"blah")},"blah: expected 6 to be above 10"),err(function(){(({foo:1})).should.have.length.of.at.most(3,"blah")},"blah: expected { foo: 1 } to have a property 'length'")}),test("match(regexp)",function(){"foobar".should.match(/^foo/),"foobar".should.not.match(/^bar/),err(function(){"foobar".should.match(/^bar/i,"blah")},"blah: expected 'foobar' to match /^bar/i"),err(function(){"foobar".should.not.match(/^foo/i,"blah")},"blah: expected 'foobar' not to match /^foo/i")}),test("length(n)",function(){"test".should.have.length(4),"test".should.not.have.length(3),[1,2,3].should.have.length(3),err(function(){4..should.have.length(3,"blah")},"blah: expected 4 to have a property 'length'"),err(function(){"asd".should.not.have.length(3,"blah")},"blah: expected 'asd' to not have a length of 3")}),test("eql(val)",function(){"test".should.eql("test"),{foo:"bar"}.should.eql({foo:"bar"}),/a/.should.eql(/a/),/a/.should.not.eql(/b/),/a/g.should.eql(/a/g),/a/g.should.not.eql(/b/g),/a/i.should.eql(/a/i),/a/i.should.not.eql(/b/i),/a/m.should.eql(/a/m),/a/m.should.not.eql(/b/m),1..should.eql(1),"4".should.not.eql(4),err(function(){4..should.eql(3,"blah")},"blah: expected 4 to deeply equal 3")}),test("equal(val)",function(){"test".should.equal("test"),1..should.equal(1),err(function(){4..should.equal(3,"blah")},"blah: expected 4 to equal 3"),err(function(){"4".should.equal(4,"blah")},"blah: expected '4' to equal 4")}),test("empty",function(){function e(){}e.prototype.length=0,"".should.be.empty,"foo".should.not.be.empty,[].should.be.empty,["foo"].should.not.be.empty,(new e).should.be.empty,{arguments:0}.should.not.be.empty,{}.should.be.empty,{foo:"bar"}.should.not.be.empty,err(function(){"".should.not.be.empty},"expected '' not to be empty"),err(function(){"foo".should.be.empty},"expected 'foo' to be empty"),err(function(){[].should.not.be.empty},"expected [] not to be empty"),err(function(){["foo"].should.be.empty},"expected [ 'foo' ] to be empty"),err(function(){(new e).should.not.be.empty},"expected { length: 0 } not to be empty"),err(function(){(({arguments:0})).should.be.empty},"expected { arguments: 0 } to be empty"),err(function(){(({})).should.not.be.empty},"expected {} not to be empty"),err(function(){(({foo:"bar"})).should.be.empty},"expected { foo: 'bar' } to be empty")}),test("property(name)",function(){"test".should.have.property("length"),4..should.not.have.property("length"),err(function(){"asd".should.have.property("foo")},"expected 'asd' to have a property 'foo'")}),test("property(name, val)",function(){"test".should.have.property("length",4),"asd".should.have.property("constructor",String),err(function(){"asd".should.have.property("length",4,"blah")},"blah: expected 'asd' to have a property 'length' of 4, but got 3"),err(function(){"asd".should.not.have.property("length",3,"blah")},"blah: expected 'asd' to not have a property 'length' of 3"),err(function(){"asd".should.not.have.property("foo",3,"blah")},"blah: 'asd' has no property 'foo'"),err(function(){"asd".should.have.property("constructor",Number,"blah")},"blah: expected 'asd' to have a property 'constructor' of [Function: Number], but got [Function: String]")}),test("ownProperty(name)",function(){"test".should.have.ownProperty("length"),"test".should.haveOwnProperty("length"),{length:12}.should.have.ownProperty("length"),err(function(){(({length:12})).should.not.have.ownProperty("length","blah")},"blah: expected { length: 12 } to not have own property 'length'")}),test("string()",function(){"foobar".should.contain.string("bar"),"foobar".should.contain.string("foo"),"foobar".should.not.contain.string("baz"),err(function(){3..should.contain.string("baz","blah")},"blah: expected 3 to be a string"),err(function(){"foobar".should.contain.string("baz","blah")},"blah: expected 'foobar' to contain 'baz'"),err(function(){"foobar".should.not.contain.string("bar","blah")},"blah: expected 'foobar' to not contain 'bar'")}),test("include()",function(){["foo","bar"].should.include("foo"),["foo","bar"].should.contain("foo"),["foo","bar"].should.include("bar"),[1,2].should.include(1),["foo","bar"].should.not.include("baz"),["foo","bar"].should.not.include(1),err(function(){["foo"].should.include("bar","blah")},"blah: expected [ 'foo' ] to include 'bar'"),err(function(){["bar","foo"].should.not.include("foo","blah")},"blah: expected [ 'bar', 'foo' ] to not include 'foo'")}),test("keys(array)",function(){(({foo:1})).should.have.keys(["foo"]),{foo:1,bar:2}.should.have.keys(["foo","bar"]),{foo:1,bar:2}.should.have.keys("foo","bar"),{foo:1,bar:2,baz:3}.should.include.keys("foo","bar"),{foo:1,bar:2,baz:3}.should.contain.keys("bar","foo"),{foo:1,bar:2,baz:3}.should.contain.keys("baz"),{foo:1,bar:2}.should.contain.keys("foo"),{foo:1,bar:2}.should.contain.keys("bar","foo"),{foo:1,bar:2}.should.contain.keys(["foo"]),{foo:1,bar:2}.should.contain.keys(["bar"]),{foo:1,bar:2}.should.contain.keys(["bar","foo"]),{foo:1,bar:2}.should.not.have.keys("baz"),{foo:1,bar:2}.should.not.have.keys("foo","baz"),{foo:1,bar:2}.should.not.contain.keys("baz"),{foo:1,bar:2}.should.not.contain.keys("foo","baz"),{foo:1,bar:2}.should.not.contain.keys("baz","foo"),err(function(){(({foo:1})).should.have.keys()},"keys required"),err(function(){(({foo:1})).should.have.keys([])},"keys required"),err(function(){(({foo:1})).should.not.have.keys([])},"keys required"),err(function(){(({foo:1})).should.contain.keys([])},"keys required"),err(function(){(({foo:1})).should.have.keys(["bar"])},"expected { foo: 1 } to have key 'bar'"),err(function(){(({foo:1})).should.have.keys(["bar","baz"])},"expected { foo: 1 } to have keys 'bar', and 'baz'"),err(function(){(({foo:1})).should.have.keys(["foo","bar","baz"])},"expected { foo: 1 } to have keys 'foo', 'bar', and 'baz'"),err(function(){(({foo:1})).should.not.have.keys(["foo"])},"expected { foo: 1 } to not have key 'foo'"),err(function(){(({foo:1})).should.not.have.keys(["foo"])},"expected { foo: 1 } to not have key 'foo'"),err(function(){(({foo:1,bar:2})).should.not.have.keys(["foo","bar"])},"expected { foo: 1, bar: 2 } to not have keys 'foo', and 'bar'"),err(function(){(({foo:1})).should.not.contain.keys(["foo"])},"expected { foo: 1 } to not contain key 'foo'"),err(function(){(({foo:1})).should.contain.keys("foo","bar")},"expected { foo: 1 } to contain keys 'foo', and 'bar'")}),test("throw",function(){var t=function(){this.name="PoorlyConstructedError"};t.prototype=Object.create(Error.prototype);var n=new RangeError("boo"),r=function(){!0},i=function(){throw new Error("testing")},s=function(){throw"testing"},o=function(){throw new ReferenceError("hello")},u=function(){throw new t},a=function(){throw n};r.should.not.throw(),r.should.not.throw(Error),r.should.not.throw(n),i.should.throw(),i.should.throw(Error),i.should.not.throw(ReferenceError),i.should.not.throw(n),s.should.throw(),s.should.not.throw(ReferenceError),s.should.not.throw(n),o.should.throw(),o.should.throw(ReferenceError),o.should.throw(Error),o.should.not.throw(TypeError),o.should.not.throw(n),u.should.throw(),u.should.throw(t),u.should.throw(Error),u.should.not.throw(n),a.should.throw(n),i.should.throw(/testing/),i.should.throw("testing"),i.should.not.throw(/hello/),i.should.not.throw("hello"),i.should.throw(Error,/testing/),i.should.throw(Error,"testing"),s.should.throw(/testing/),s.should.throw("testing"),s.should.not.throw(/hello/),s.should.not.throw("hello"),e.throw(i),e.throw(o,ReferenceError),e.throw(o,Error),e.throw(u,t),e.throw(a,n),e.not.throw(r),e.not.throw(i,ReferenceError),e.not.throw(i,n),e.throw(i,Error,/testing/),e.throw(i,Error,"testing"),err(function(){r.should.throw()},"expected [Function] to throw an error"),err(function(){r.should.throw(ReferenceError)},"expected [Function] to throw ReferenceError"),err(function(){r.should.throw(n)},"expected [Function] to throw [RangeError: boo]"),err(function(){i.should.not.throw()},"expected [Function] to not throw an error but [Error: testing] was thrown"),err(function(){i.should.throw(ReferenceError)},"expected [Function] to throw 'ReferenceError' but [Error: testing] was thrown"),err(function(){i.should.throw(n)},"expected [Function] to throw [RangeError: boo] but [Error: testing] was thrown"),err(function(){i.should.not.throw(Error)},"expected [Function] to not throw 'Error' but [Error: testing] was thrown"),err(function(){s.should.not.throw()},"expected [Function] to not throw an error but 'testing' was thrown"),err(function(){s.should.throw(ReferenceError)},"expected [Function] to throw 'ReferenceError' but 'testing' was thrown"),err(function(){s.should.throw(n)},"expected [Function] to throw [RangeError: boo] but 'testing' was thrown"),err(function(){s.should.not.throw("testing")},"expected [Function] to throw error not including 'testing'"),err(function(){o.should.not.throw(ReferenceError)},"expected [Function] to not throw 'ReferenceError' but [ReferenceError: hello] was thrown"),err(function(){i.should.throw(t)},"expected [Function] to throw 'PoorlyConstructedError' but [Error: testing] was thrown"),err(function(){u.should.not.throw(t)},/^(expected \[Function\] to not throw 'PoorlyConstructedError' but)(.*)(PoorlyConstructedError|\{ Object \()(.*)(was thrown)$/),err(function(){u.should.throw(ReferenceError)},/^(expected \[Function\] to throw 'ReferenceError' but)(.*)(PoorlyConstructedError|\{ Object \()(.*)(was thrown)$/),err(function(){a.should.throw(new ReferenceError("eek"))},"expected [Function] to throw [ReferenceError: eek] but [RangeError: boo] was thrown"),err(function(){a.should.not.throw(n)},"expected [Function] to not throw [RangeError: boo]"),err(function(){i.should.not.throw(/testing/)},"expected [Function] to throw error not matching /testing/"),err(function(){i.should.throw(/hello/)},"expected [Function] to throw error matching /hello/ but got 'testing'"),err(function(){i.should.throw(Error,/hello/,"blah")},"blah: expected [Function] to throw error matching /hello/ but got 'testing'"),err(function(){i.should.throw(Error,"hello","blah")},"blah: expected [Function] to throw error including 'hello' but got 'testing'")}),test("respondTo",function(){function e(){}e.prototype.bar=function(){},e.func=function(){};var t={};t.foo=function(){},e.should.respondTo("bar"),e.should.not.respondTo("foo"),e.should.itself.respondTo("func"),e.should.itself.not.respondTo("bar"),t.should.respondTo("foo"),err(function(){e.should.respondTo("baz","constructor")},/^(constructor: expected)(.*)(\[Function: Foo\])(.*)(to respond to \'baz\')$/),err(function(){t.should.respondTo("baz","object")},/^(object: expected)(.*)(\{ foo: \[Function\] \}|\{ Object \()(.*)(to respond to \'baz\')$/)}),test("satisfy",function(){var e=function(e){return e===1};1..should.satisfy(e),err(function(){2..should.satisfy(e,"blah")},"blah: expected 2 to satisfy [Function]")}),test("closeTo",function(){1.5.should.be.closeTo(1,.5),err(function(){2..should.be.closeTo(1,.5,"blah")},"blah: expected 2 to be close to 1 +/- 0.5")}),test("include.members",function(){[1,2,3].should.include.members([3]),[1,2,3].should.include.members([]),[1,2,3].should.include.members([2,1]),[1,2,3].should.not.include.members([999]),[].should.not.include.members([23]),err(function(){[].should.include.members([43])},"expected [] to be a superset of [ 43 ]"),err(function(){[5,2,1].should.not.include.members([2])},"expected [ 5, 2, 1 ] to not be a superset of [ 2 ]"),err(function(){"foo".should.include.members([12])},"expected 'foo' to be an array"),err(function(){[1,2,3].should.include.members("o")},"expected 'o' to be an array")}),test("memberEquals",function(){[1,2,3].should.have.same.members([3,2,1]),[5,4].should.have.same.members([5,4]),[].should.have.same.members([]),err(function(){[1,2,3].should.have.same.members([])},"expected [ 1, 2, 3 ] to have the same members as []"),err(function(){[1,2,3].should.have.same.members(4)},"expected 4 to be an array")})});