(function(){define(["entities","components","underscore"],function(e,t,n){return suite("Entities",function(){return setup(function(){return this.em=new e.EntityManager,this.entity_0=this.em.create(new t.TypeName({name:"test0"}),new t.Position({x:4,y:8})),this.gid1=this.em.createGroup(),this.gid2=this.em.createGroup(),this.gid3=12345,this.em.addToGroup(this.gid1,this.entity_0)}),test("Module should be defined",function(){return assert.isDefined(e)}),suite("EntityManager",function(){return test(".get should give quick access to a component",function(){var e;return e=this.em.get(this.entity_0,t.Position),assert.equal(e.x,4),assert.equal(e.y,8)}),test(".get should accept multiple components",function(){var e,n,r;return r=this.em.get(this.entity_0,t.Position,t.TypeName),e=r[0],n=r[1],assert.equal(e.x,4),assert.equal(e.y,8),assert.equal(n.name,"test0")}),test(".get with no specified component should return all",function(){var e,r,i,s,o,u,a,f,l;o="My Test 0",i=new t.EntityName({name:o}),this.em.addComponent(this.entity_0,i),e=this.em.get(this.entity_0),assert.equal(e.EntityName.name,o),r=n.keys(e),r.sort(),s=["EntityName","Position","TypeName"],l=[];for(u=a=0,f=r.length-1;0<=f?a<=f:a>=f;u=0<=f?++a:--a)l.push(assert.equal(r[u],s[u]));return l}),test(".addComponent should add a component to an entity",function(){var e,n,r;return r="My Test 0",e=new t.EntityName({name:r}),this.em.addComponent(this.entity_0,e),n=this.em.get(this.entity_0,t.EntityName),assert.equal(n.name,r)}),test(".removeComponent should remove a component",function(){var e,n;return e=new t.EntityName("Blah blah"),this.em.addComponent(this.entity_0,e),this.em.removeComponent(this.entity_0,e),n=this.em.get(this.entity_0,t.EntityName),assert.equal(n,null)}),test("create/destroyEntity should properly manage indexes",function(){var e,r,i,s,o,u,a,f,l;r=[new t.TypeName("test1"),new t.Position(null,4,8)],i=(f=this.em).create.apply(f,r),assert.ok(this.em.has(this.entity_0)),assert.ok(this.em.has(i));for(s=0,u=r.length;s<u;s++)e=r[s],assert.equal(this.em.store[e.type][i],e);this.em.destroy(i),assert.ok(this.em.has(this.entity_0)),assert.ok(!this.em.has(i)),l=[];for(o=0,a=r.length;o<a;o++)e=r[o],l.push(assert.ok(n.isUndefined(this.em.store[e.type][i])));return l}),test(".addEntityToGroup should add to group",function(){return assert.equal(this.em.groupForEntity(this.entity_0),this.gid1),assert.equal(this.em.entitiesForGroup(this.gid1)[this.entity_0],1),assert.ok(this.em.groupHasEntity(this.gid1,this.entity_0)),assert.ok(!this.em.groupHasEntity(this.gid2,this.entity_0)),assert.ok(!this.em.groupHasEntity(this.gid3,this.entity_0))}),test(".removeEntityFromGroup should remove from group",function(){return this.em.removeFromGroup(this.gid1,this.entity_0),assert.equal(this.em.groupForEntity(this.entity_0),null),assert.equal(this.em.entitiesForGroup(this.gid1)[this.entity_0],null),assert.ok(!this.em.groupHasEntity(this.gid1,this.entity_0)),assert.ok(!this.em.groupHasEntity(this.gid2,this.entity_0)),assert.ok(!this.em.groupHasEntity(this.gid3,this.entity_0))}),test("Destruction should remove from group",function(){return this.em.destroy(this.entity_0),assert.equal(this.em.groupForEntity(this.entity_0),null),assert.equal(this.em.entitiesForGroup(this.gid1)[this.entity_0],null),assert.ok(!this.em.groupHasEntity(this.gid1,this.entity_0)),assert.ok(!this.em.groupHasEntity(this.gid2,this.entity_0)),assert.ok(!this.em.groupHasEntity(this.gid3,this.entity_0))})})})})}).call(this);