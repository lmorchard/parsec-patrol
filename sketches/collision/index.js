(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/lmorchard/devel/other/parsec-patrol/src/sketches/collision/index.js":[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

var _core = require("core");

var Core = _interopRequireWildcard(_core);

var _Vector2D = require("Vector2D");

var _Vector2D2 = _interopRequireDefault(_Vector2D);

require("plugins/drawStats");

require("plugins/memoryStats");

require("plugins/datGui");

require("plugins/canvasViewport");

require("plugins/name");

require("plugins/health");

require("plugins/position");

require("plugins/motion");

require("plugins/thruster");

require("plugins/seeker");

require("plugins/clickCourse");

require("plugins/collision");

require("plugins/bounce");

var debug = true;
var move = 0.07;
var rot = Math.PI / 2;

var world = window.world = new Core.World({
  systems: {
    CanvasViewport: {
      debug: debug,
      container: '#game',
      canvas: '#viewport',
      followName: 'hero1',
      zoom: 0.5
    },
    DrawStats: {},
    MemoryStats: {},
    DatGui: {},
    Motion: {},
    Thruster: {},
    Seeker: {},
    ClickCourse: {},
    Collision: {},
    Bounce: {}
  }
});

world.entities.insert({
  Name: { name: 'hero1' },
  Sprite: { name: 'hero', color: '#00f' },
  Collidable: {},
  Bounce: { mass: 7000 },
  Position: { x: 0, y: 0 },
  Thruster: { deltaV: 1200, maxV: 500, active: false },
  Seeker: { radPerSec: Math.PI },
  Motion: {},
  ClickCourse: { stopOnArrival: true, active: false }
});

function spawnAsteroid(x, y, width, height, dx, dy, dr, mass, health) {
  world.entities.insert({
    Sprite: { name: 'asteroid', size: width },
    Health: { max: health },
    Collidable: {},
    Bounce: { mass: mass },
    Position: { x: x, y: y },
    Motion: { dx: dx, dy: dy, drotation: dr }
  });
}

function spawnField(centerX, centerY) {
  var radius = arguments.length <= 2 || arguments[2] === undefined ? 300 : arguments[2];
  var MAX_ASTEROIDS = arguments.length <= 3 || arguments[3] === undefined ? 50 : arguments[3];
  var MAX_TRIES = arguments.length <= 4 || arguments[4] === undefined ? 5 : arguments[4];
  var MIN_SIZE = arguments.length <= 5 || arguments[5] === undefined ? 20 : arguments[5];
  var MAX_SIZE = arguments.length <= 6 || arguments[6] === undefined ? 200 : arguments[6];
  var MAX_GRAV = arguments.length <= 7 || arguments[7] === undefined ? 10 : arguments[7];

  var vCenter = new _Vector2D2["default"](centerY, centerX);
  var vSpawn = new _Vector2D2["default"](0, 0);
  var vGrav = new _Vector2D2["default"](0, 0);
  var inField = [];

  for (var idx = 0; idx < MAX_ASTEROIDS; idx++) {
    for (var c = 0; c < MAX_TRIES; c++) {

      var size = (MAX_SIZE - MIN_SIZE) * Math.random() + MIN_SIZE;
      var rot = Math.PI * 4 * Math.random();
      vSpawn.setValues(vCenter.x, vCenter.y - ((radius - 1) * Math.random() + 1));
      vSpawn.rotateAround(vCenter, rot);

      var isClear = true;
      for (var fldIdx = 0; fldIdx < inField.length; fldIdx++) {
        var item = inField[fldIdx];
        if (Math.abs(vSpawn.x - item.x) * 2 >= (size + item.width) * 1.025) {
          continue;
        }
        if (Math.abs(vSpawn.y - item.y) * 2 >= (size + item.height) * 1.025) {
          continue;
        }
        isClear = false;
        break;
      }
      if (!isClear) {
        continue;
      }

      inField.push({ x: vSpawn.x, y: vSpawn.y, width: size, height: size });

      vGrav.setValues(0, Math.random() * MAX_GRAV);
      vGrav.rotate(rot);

      spawnAsteroid(vSpawn.x, vSpawn.y, size, size, vGrav.x, vGrav.y, Math.PI * 0.25 * Math.random(), 4 * size * size, 4 * size * size);
    }
  }
}

var pos = 470;
var size = 440;
var num = 200;

spawnField(-pos, -pos, size, num);
spawnField(pos, pos, size, num);
spawnField(pos, -pos, size, num);
spawnField(-pos, pos, size, num);

world.start();

var vpSystem = world.getSystem('CanvasViewport');
var guiSystem = world.getSystem('DatGui');
var gui = guiSystem.gui;

gui.add(world, 'isPaused');
gui.add(world, 'debug');
gui.add(vpSystem, 'zoom', vpSystem.options.zoomMin, vpSystem.options.zoomMax).listen();
gui.add(vpSystem, 'lineWidth', 1.0, 4.0).step(0.5).listen();

var names = ['gridEnabled', 'followEnabled', 'cameraX', 'cameraY'];
names.forEach(function (name) {
  gui.add(vpSystem, name).listen();
});

var cp = vpSystem.cursorPosition;
gui.add(cp, 'x').listen();
gui.add(cp, 'y').listen();

},{"Vector2D":"Vector2D","core":"core","plugins/bounce":"plugins/bounce","plugins/canvasViewport":"plugins/canvasViewport","plugins/clickCourse":"plugins/clickCourse","plugins/collision":"plugins/collision","plugins/datGui":"plugins/datGui","plugins/drawStats":"plugins/drawStats","plugins/health":"plugins/health","plugins/memoryStats":"plugins/memoryStats","plugins/motion":"plugins/motion","plugins/name":"plugins/name","plugins/position":"plugins/position","plugins/seeker":"plugins/seeker","plugins/thruster":"plugins/thruster"}]},{},["/Users/lmorchard/devel/other/parsec-patrol/src/sketches/collision/index.js"])
//# sourceMappingURL=data:application/json;base64,
